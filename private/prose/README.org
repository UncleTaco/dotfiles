#+TITLE: Prose Mode Configuration, in Literate Form
#+AUTHOR: Elais Jackson
#+EMAIL: elais.player@gmail.com
#+LANGUAGE: emacs-lisp
#+STARTUP: align indent fold nodlcheck hidestars oddeven hideblocks lognotestate
* Introduction
** What is this, why is it worthwhile?
+ I wanted to make a literate programming (LP) single file config for prose mode
  because I think we can all agree that if we're going to create a dedicated
  prose-mode for writers, what better way than to present the config than in a
  readable document?
+ Hopefully you'll read this in org mode and not through some other medium. This
  was meant to be renderered in that mode.
* The Meat
This is where the actual settings will go. There are quite a few things for us
to consider here. First we need to define emacs behavior after entering org-mode
(things like line wrapping, fill column, etc.), then we need to define our
functions and keybindings.

** Config
Define hooks and settings to take affect once we enter org-mode.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/config.el" :noweb 

  ;; fontify code in code blocks
  (setq org-src-fontify-natively t)

  ;; enable flyspell-mode and writegood-mode when org-mode is active

  ;; text wrapping at 80 columns by default (only text)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook
            '(lambda() (set-fill-column 80)))

#+end_src
#+RESULTS:

** Keybindings
Define some keybindings to activate writeroom and handle sentence navigation.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/keybindings.el" :noweb
  ;; keybindings for artbollocks mode
  (evil-leader/set-key-for-mode 'artbollocks-mode
    "mmw" 'artbollocks-word-count
    "mms" 'artbollocks-sentence-count
    "mmr" 'artbollocks-readability-index
    "mme" 'artbollocks-reading-ease
    "mmg" 'artbollocks-grade-level)

  ;; keybindings for sentence navigation
  (define-key evil-normal-state-map ")" 'sn/evil-forward-sentence)
  (define-key evil-normal-state-map "(" 'sn/evil-backward-sentence)
  (define-key evil-normal-state-map "g)" 'sn/evil-forward-sentence-end)
  (define-key evil-normal-state-map "g(" 'sn/evil-backward-sentence-end)
  (define-key evil-outer-text-objects-map "S" 'sn/evil-outer-sentence)
  (define-key evil-inner-text-objects-map "S" 'sn/evil-inner-sentence)
#+end_src

#+RESULTS:
: sn/evil-inner-sentence

** Tools
I define functions here, because they are multiline, most will get their own codeblocks.
*** DONE Distraction Free Writing
CLOSED: [2015-06-12 Fri 15:54]

This section defines all of the functions to implement that lead to a
distraction free prose environment. Its basically darkroom, but I wanted it in this
document so that I could edit it as I saw fit. Please support the original
release at https://github.com/capitaomorte/darkroom

#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb
#+end_src

#+RESULTS:
: toggle-prose-mode

#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb
    (defcustom prose-margins 'prose-guess-margins
      "Margins to use in `prose-mode'.
    Its value can be:
    - a floating point value betweeen 0 and 1, specifies percentage of
      window width in columns to use as a margin.
    - a cons cell (LEFT RIGHT) specifying the left and right margins
      in columns.
    - a function of a single argument, a window, that returns a cons
      cell interpreted like the previous option. An example is
      `prose-guess-margins', which see. Beware that this function
      is called very often, so if it does some non-trivial processing
      on the buffer's text, consider caching that value.
    Value is effective when `prose-mode' is toggled."
      :type '(choice float
                     (cons integer integer)
                     (function-item prose-guess-margins :doc "Guess margins")
                     (function prose-guess-margins))
      :group 'prose)

    (defcustom prose-text-scale-increase 1
      "Steps to increase text size when in `prose-mode'.
    Value is passed to `text-scale-increase'."
      :type 'integer
      :group 'prose)

    (defcustom prose-fringes-outside-margins t
      "If non-nil use fringes outside margins for `prose-mode'"
      :type 'boolean
      :group 'prose)

    (defcustom prose-margin-increment 0.05
      "Increment to add used in `prose-increase-margins'."
      :type 'float
      :group 'prose)

    (defcustom prose-margins-if-failed-guess 0.15
      "Margins when `prose-guess-margins' fails.
    If `prose-guess-margins' failed to figure out margins to
    center the text, use this percentage of window width for the
    symmetical margins."
      :type 'float
      :group 'prose)

    (defcustom prose-verbose nil
      "If non-nil, be verbose about prose operations."
      :type 'boolean
      :group 'prose)

    (defvar prose--guess-margins-statistics-cache nil
      "Cache used by `prose-guess-margins'.")

    ;; (defcustom prose-global-effects '(prose-toggle-alpha)
    ;;   "docstring."
    ;;  :group 'prose
    ;;  :type '(set (const :tag "Disable transparency" prose-toggle-alpha)))

    (defmacro define-prose-global-effect (fp value)
      "Define a global effect.
    The effect is activated by setting frame parameter FP to VALUE.
    FP should be an unquoted symbol, the name of a frame parameter;
    VALUE must be quoted (unless it is a string or a number, of
    course). It can also be an unquoted symbol, in which case it
    should be the name of a global variable whose value is then
    assigned to FP.
    This macro defines a function `prose-toggle-<FP>' that takes
    one argument and activates the effect if this argument is t and
    deactivates it when it is nil. When the effect is activated,
    the original value of frame parameter FP is stored in a frame
    parameter `prose-<FP>', so that it can be restored when the
    effect is deactivated."
      (declare (indent defun))
      (let ((wfp (intern (format "prose-%s" fp))))
        `(fset (quote ,(intern (format "prose-toggle-%s" fp)))
               (lambda (arg)
                 (if arg
                     (progn
                       (set-frame-parameter nil (quote ,wfp) (frame-parameter nil (quote ,fp)))
                       (set-frame-parameter nil (quote ,fp) ,value))
                   (set-frame-parameter nil (quote ,fp) (frame-parameter nil (quote ,wfp)))
                   (set-frame-parameter nil (quote ,wfp) nil))))))

    (define-prose-global-effect alpha '(100 100))
#+end_src

#+RESULTS:
: prose

We're also going to just go ahead and create a group for our prose mode stuff.
The next two functions are going to deal with resized text, margins, and
windows. This is based largely on the configurations found in darkroom mode
which is, sadly, not available on MELPA. When originally working on this, I ran
into a problem inherent in resizing text was that the window and buffer didn not
scale to match the new character widths. This was taken wholly from the darkroom
project... I apologize for nothing.

This function is for calculating the window width
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb
  (defun prose--window-width (&optional window)
    "calculate width of window in columns, considering text scaling"
    (when (= (point-min) (point-max))
      (error "Cannot calculate the width of a single character"))
    (let* ((window (or window (selected-window)))
           (scaled-char-width (car (window-text-pixel-size
                                    window
                                    (point-min) (1+ (point-min)))))
           (char-width (frame-char-width))
           (margins (window-margins window)))
      (cons (truncate
             (+ (window-width window 'pixelwise)
                (* char-width (or (car margins) 0))
                (* char-width (or (cdr margins) 0)))
             scaled-char-width)
            scaled-char-width)))
#+end_src

#+RESULTS:
: prose--window-width

This function allows emacs to guess the margin.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb
  (defun prose-guess-margins (window)
    "Guess suitable margins for 'prose margins'"
    (if (or visual-line-mode
            (and buffer-face-mode
                 (eq 'variable-pitch buffer-face-mode-face))
            (= (point-min) (point-max)))
        prose-margins-if-failed-guess
      (let* ((window-width-info (if (integerp window)
                                    window
                                  (prose--window-width window)))
             (window-width (car window-width-info))
             (scaled-char-width (cdr window-width-info))
             (top-quartile-avg
              (or prose--guess-margins-statistics-cache
                  (set
                   (make-local-variable 'prose--guess-margins-statistics-cache)
                   (let* ((line-widths
                           (save-excursion
                             (goto-char (point-min))
                             (cl-loop for start = (point)
                                      while (search-forward "\n"
                                                            20000
                                                            'no-error)
                                      for width = (truncate
                                                   (car
                                                    (window-text-pixel-size
                                                     window
                                                     start (1- (point))))
                                                   scaled-char-width)
                                      unless (zerop width)
                                      collect width)))
                          (n4 (max 1 (/ (length line-widths) 4))))
                     (/ (apply '+ (cl-subseq (sort line-widths '>) 0 n4)) n4))))))
        (cond
         ((> top-quartile-avg
             window-width)
          (message "long lines detected, consider visual-line-mode")
          prose-margins-if-failed-guess)
         ((> top-quartile-avg (* 0.9 fill-column))
          ;; calculate margins so that 'fill-column' + 1 colmns are
          ;; centered on the window
          (let ((margin (truncate (* (- window-width (1+ fill-column))
                                     (/ (float scaled-char-width)
                                        (frame-char-width)))
                                  2)))
            (if prose-verbose
                (message "Choosing %s-wie margins based on fill-column %s"
                         margin fill-column))
            (cons margin margin)))
         (t
          prose-margins-if-failed-guess)))))
#+end_src

#+RESULTS:
: prose-guess-margins

Here we try to compute the desired margins for the window.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb 
  (defun prose--compute-margins (window)
    "From \"prose-margins\", computes desired margins for WINDOW."
    (let ((prose-margins
           (if (functionp prose-margins)
               (funcall prose-margins window)
             prose-margins)))
      (cond ((consp prose-margins)
             prose-margins)
            ((and (floatp prose-margins)
                  (< prose-margins 1))
             (let ((delta (prose--float-to-columns prose-margins)))
               (cons delta delta)))
            (t
             (error "Illegal value in prose-margins")))))

  (defun prose--float-to-columns (f)
    (ceiling (* (let ((edges (window-edges)))
                  (- (nth 2 edges) (nth 0 edges)))
                f)))
#+end_src

At this point I'm getting lazy, I want darkroom mode but also the ability to
edit it, so I'm just going to take the source.

Here I'm going to collect the margin functions
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb 
  (defvar prose--margin-factor 1
    "Buffer local factor affecting `prose--set-margins'")

  (defun prose--set-margins ()
    "Set darkroom margins for currently selected window"
    (let* ((window-configuration-change-hook nil)
           (window (selected-window))
           (margins (prose--compute-margins window)))
      ;; See description of
      ;; `fringes-outside-margins' for the reason
      ;; for this apparent noop
      (set-window-buffer window (current-buffer))
      (set-window-margins window
                          (round
                           (* prose--margin-factor
                              (car margins)))
                          (round
                           (* prose--margin-factor
                              (cdr margins))))))

  (defun prose--reset-margins ()
    "Reset darkroom margins for currently selected window."
    (set-window-margins (selected-window) 0 0))

  (defun prose-increase-margins (increment)
    "Increase darkroom margins by INCREMENT."
    (interactive (list prose-margin-increment))
    (set (make-local-variable 'prose--margin-factor)
         (* prose--margin-factor (+ 1 increment)))
    (mapc #'(lambda (w)
              (with-selected-window w
                (prose--set-margins)))
          (get-buffer-window-list (current-buffer))))

  (defun prose-decrease-margins (decrement)
    "Decrease darkroom margins by DECREMENT."
    (interactive (list prose-margin-increment))
    (prose-increase-margins (- decrement)))
#+end_src

Now we need to map some functions for increasing and decreasing margins
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb 
  (defvar prose-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-M-+") 'prose-increase-margins)
      (define-key map (kbd "C-M--") 'prose-decrease-margins)
      map))

  (defconst prose--saved-variables
    '(mode-line-format
      header-line-format
      fringes-outside-margins)
    "Variables saved in `prose--saved-state'")

  (defvar prose--saved-state nil
    "Saved state before `prose-mode' is turned on.
  Alist of (VARIABLE . BEFORE-VALUE)")

  ;; (defun prose--activate-global-effects (arg)
  ;;   "Activate or deactivate global effects.
  ;; The effects are activated if ARG is non-nil, and deactivated
  ;; otherwise."
  ;;   (mapc (lambda (fn)
  ;;           (funcall fn arg))
  ;;         prose-global-effects))
#+end_src

Now here are the activation functions
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb 
  (defun prose--enter (&optional just-margins)
    "Save current state and enter prose for the current buffer.
  With optional JUST-MARGINS, just set the margins."
    (unless just-margins
      (setq prose--saved-state
            (mapcar #'(lambda (sym)
                        (cons sym (buffer-local-value sym (current-buffer))))
                    prose--saved-variables))
      (setq mode-line-format nil
            header-line-format nil
            fringes-outside-margins prose-fringes-outside-margins)
      (text-scale-increase prose-text-scale-increase))
    (mapc #'(lambda (w)
              (with-selected-window w
                (prose--set-margins)))
          (get-buffer-window-list (current-buffer))))

  (defun prose--leave ()
    "Undo the effects of `prose--enter'."
    (mapc #'(lambda (pair)
              (set (make-local-variable (car pair)) (cdr pair)))
          prose--saved-state)
    (setq prose--saved-state nil)
    (text-scale-decrease prose-text-scale-increase)
    (mapc #'(lambda (w)
              (with-selected-window w
                (prose--reset-margins)))
          (get-buffer-window-list (current-buffer))))

  (defun prose--enter-or-leave ()
    "Enter or leave prose according to window configuration."
    (cond ((= (count-windows) 1)
           (prose--enter prose--saved-state))
          (prose--saved-state
           (prose--leave))
          (t
           ;; for clarity, don't do anything
           )))

  (declare-function prose-tentative-mode "prose" t)
#+end_src

And finally, the actual definition of the minor modes
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb 
  ;;;###autoload
  (define-minor-mode prose-mode
    "Remove visual distractions and focus on writing. When this
  mode is active, everything but the buffer's text is elided from
  view. The buffer margins are set so that text is centered on
  screen. Text size is increased (display engine allowing) by
  `prose-text-scale-increase'." nil nil nil
    (when prose-tentative-mode
      (display-warning
       'prose
       (concat "Turning off `prose-tentative-mode' first. "
               "It doesn't go with `prose-mode'.")
       (let ((prose-mode nil))
         (prose-tentative-mode -1))))
    (cond (prose-mode
           (prose--enter)
           (add-hook 'window-configuration-change-hook 'prose--set-margins
                     t t))
          (t
           (prose--leave)
           (remove-hook 'window-configuration-change-hook 'prose--set-margins
                        t))))

  ;;;###autoload
  (define-minor-mode prose-tentative-mode
    "Enters `prose-mode' when all other windows are deleted."
    nil " Room" prose-mode-map
    ;; always begin by removing the hook
    ;; 
    (remove-hook 'window-configuration-change-hook
                 'prose--enter-or-leave 'local)
    (when prose-mode
      (display-warning
       'prose
       (concat "Turning off `prose-mode' first. "
               "It doesn't go with `prose-tentative-mode'.")
       (let ((prose-tentative-mode nil))
         (prose-mode -1))))
    ;; turn prose on or off according to window state
    ;; 
    (cond (prose-tentative-mode
           ;; re-add the hook when we are turning ourselves on
           ;;
           (add-hook 'window-configuration-change-hook
                     'prose--enter-or-leave 'append 'local)
           ;; call this right away if we're supposed to turn prose on
           ;; immediately.
           ;; 
           (prose--enter-or-leave))
          (t
           (prose--leave))))

  ;; sets up toggle-prose-mode
  (defun prose/toggle-prose-mode ()
    "Toggle extra settings for distraction free writing."
    (interactive)
    (cond ((bound-and-true-p prose-mode)
           (widen)
           (prose-mode -1)
           (winner-redo))
          (t
           (outline-mark-subtree)
           (narrow-to-region (region-beginning)(region-end))
           (deactivate-mark)
           (delete-other-windows)
           (prose-mode 1)
           (message "happy writing"))))
  (evil-leader/set-key "tW" 'prose/toggle-prose-mode)

#+end_src

*** Fill and Unfill paragraph
These two functions fill and unfill the paragraph. These are useful for when
someone wants to use a mode other than org.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/prose/funcs.el" :noweb
  (defun my/unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text"
    (interactive (progn
                   (barf-if-buffer-read-only)
                   (list t)))
    (let ((fill-column (point-max)))
      (fill-paragraph nil region)))
  (bind-key "M-Q" 'my/unfill-paragraph)

  (defun my/fill-or-unfill-paragraph (&optional unfill region)
    "Fill paragraph (or Region)"
    (interactive (progn
                   (barf-if-buffer-read-only)
                   (list (if current-prefix-arg 'unfill) t)))
    (let ((fill-column (if unfill (point-max) fill-column)))
      (fill-paragraph nil region)))
  (bind-key "M-q" 'my/fill-or-unfill-paragraph)
#+end_src

#+RESULTS:
: my/fill-or-unfill-paragraph


*** TODO Projectile Integration
We're going to define novel properties here. The purpose of these are to make
lookups easier during the novel writing process. We'll be able to generate
tables for the metadata in the novel itself. These may do better if stored in
the actual novel...
#+begin_src emacs-lisp :tangle yes
#+end_src

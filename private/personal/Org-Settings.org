* Introduction
I've decided to just store all of my org-mode settings in a single file within
the personal layer. As a matter of fact, I think all of my personal
configurations will go in here from now on, so that
- They will always be under version control
- I'll have be able to look and reassure myself of certain decisions I make
  regarding my configs, so writing them up in a literate style is good for me.
All that being said, I will now begin my descent into describing my org-mode
settings.
* Config
The file paths to my various org-files will go here. I use Claus Witt's settings
as a model, I'll probably expland upon or reduce this as time goes on, but here
are the six paths.

- /org-dir/ where all org files are stored.
- /gtd-inbox/ where newly created tasks go after an org capture
- /inbox-txt/ a hold over from Claus, this is where the txt version of my inbox
  is stored.
- /gtd/ this is the gtd directory where my main task and update files go
- /journal/ where I write down ideas and thoughts. I don't do much here because
  I write physical morning pages, so this may or may not get used.
- /notes/ snippets and notes
- /groceries/ where I store grocery lists, though I usually let Kat do it.
** Folders  
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/personal/funcs.el" :noweb
  (defun open-org-dir ()
    "Opens the org dir"
    (interactive)
    (find-file "~/Dropbox/org/")
    )
  (defun gtd-inbox ()
    "Open the gtd inbox"
    (interactive)
    (find-file "~/Dropbox/org/inbox.org")
    )
  (defun gtd-inbox-txt ()
    "Open the gtd inbox"
    (interactive)
    (find-file "~/Dropbox/org/inbox.org.txt")
    )
  (defun gtd ()
    "Open GTD directory"
    (interactive)
    (find-file "~/Dropbox/org/gtd/main.org")
    )
  (defun journal ()
    "Open Journal"
    (interactive)
    (find-file "~/Dropbox/org/journal.org")
    )
  (defun notes ()
    "Switch to my work dir."
    (interactive)
    (find-file "~/Dropbox/org/notes/")
    )
  (defun groceries ()
    "Edit grocery list"
    (interactive)
    (find-file "~/Dropbox/org/groceries.org")
    )

  (defun my-org-archive-done-tasks ()
    (interactive)
    (org-map-entries 'org-archive-subtree "/DONE" 'file)
    )
#+end_src

 Now to point the org files to the proper directory.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/personal/config.el" :noweb
(setq org-directory "~/Dropbox/org/")
#+end_src
Were also going to go ahead and define our capture templates here. I only have
them for Inbox, Groceries, and Journal entries. Will add more later.

#+begin_src emacs-lisp :tangle "~/.emacs.d/private/personal/config.el" :noweb
  (setq org-capture-templates
        '(("i" "Inbox" entry (file "~/Dropbox/org/inbox.org")
           "** TODO %?\n %i\n %a")
          ("t" "Todo" entry (file+headline "~/Dropbox/org/gtd/private.org" "Tasks")
           "* TODO %?\n %i\n %a")
          ("g" "Groceries" entry (file+headline "~/Dropbox/org/groceries.org" "INBOX")
           "* %?\n %i\n %a")
          ("j" "Journal Entry" entry (file+datetree "~/Dropbox/org/journal.org")
           "* %?\nEntered on %U\n %i\n %a")
          )
        )
#+end_src
** DONE org-setup
CLOSED: [2015-06-15 Mon 22:01]
- State "DONE"       from "TODO"       [2015-06-15 Mon 22:01]
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/personal/config.el" :noweb
  ;; Org settings
  (setq org-directory "~/Dropbox/org/")
  (setq org-agenda-files '("~/Dropbox/org/gtd/main.org"
                           "~/Dropbox/org/gtd/main.org_archive"
                           "~/Dropbox/org/groceries.org"
                           "~/Dropbox/org/journal.org"
                           "~/Dropbox/org/writing/project1/project1.org"
                           "~/Dropbox/org/writing/project2/project2.org"))
  ;; The habit package for org is awesome!
  (require 'org-habit)
  ;; Ifttt auto appends .txt to filenames for dropbox append to file action
  (add-to-list 'auto-mode-alist '("\\Dropbox/org/.*\.txt\\'" . org-mode))

#+end_src
** DONE org-agenda keywords 
CLOSED: [2015-06-15 Mon 20:37]
- State "DONE"       from "TODO"       [2015-06-15 Mon 20:37]
I use two models for keywords here. The first is Tony Ballantyne's writing
sequences, the second one is a set of sequences that will be used generally in
org-mode. Its best to collect all of the todo stuff together, for convenience,
and because you can only do one setq.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/personal/config.el" :noweb
  (setq org-todo-keywords
        (quote ((sequence "TODO(t!)"  "NEXT(n!)" "STARTED(s!)" "APPT(a!)" "|" "DONE(d!)")
                (sequence "REPEAT(r)"  "WAITING(w!)" "HOLD(h!)" "|"  "PAUSED(p@/!)" "CANCELLED(c@/!)" )
                (sequence "IDEA(i!)" "MAYBE(y!)" "STAGED(s!)" "WORKING(k!)" "|" "USED(u!/@)")
                )))
#+end_src
** DONE org-refile settings
CLOSED: [2015-06-15 Mon 21:45]
- State "DONE"       from "TODO"       [2015-06-15 Mon 21:45]
Add completion... Hmm.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/personal/config.el" :noweb
  ;Use IDO for both buffer and file completion and ido-everywhere to t
  (setq org-completion-use-ido t)
  (setq ido-everywhere t)
  (setq ido-max-directory-size 100000)
  (ido-mode (quote both))

  ; Use the current window when visiting files and buffers with ido
  (setq ido-default-file-method 'selected-window)
  (setq ido-default-buffer-method 'selected-window)
#+end_src
And lets set some refile targets.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/personal/config.el" :noweb
  ;; Quick searches in org mode
  ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
  ; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path t)

  ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)

  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+end_src

Exclude DONE state tasks from refile targets
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/personal/funcs.el" :noweb
  (setq org-indirect-buffer-display 'current-window)
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+end_src
** org-agenda settings
This is perhaps the meat of my org file, dealing with agenda settings. First we
need to tell org-mode where to find my org-agenda-files. We're also going to
make it a list so that we can add more directories as time goes on. I'm working
on a novel, so this is ideal because even though I would love to put everything
in my dropbox, I'd prefer to keep my writing files under another form of source
control, particularly so I can revert to a previous version if something goes
horribly wrong. Its overkill, yes, but worth it.
#+begin_src emacs-lisp :tangle "~/.emacs.d/private/personal/config.el" :noweb
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

  (defun custom-org-agenda-mode-defaults ()
    (org-defkey org-agenda-mode-map "W" 'oh/agenda-remove-restriction)
    (org-defkey org-agenda-mode-map "N" 'oh/agenda-restrict-to-subtree)
    (org-defkey org-agenda-mode-map "P" 'oh/agenda-restrict-to-project)
    (org-defkey org-agenda-mode-map "q" 'bury-buffer)
    (org-defkey org-agenda-mode-map "I" 'org-clock-in)
    (org-defkey org-agenda-mode-map "O" 'org-clock-out)
    )

  (add-hook 'org-agenda-mode-hook 'custom-org-agenda-mode-defaults 'append)
  (setq org-agenda-custom-commands
        '(("a" "Agenda"
           ((agenda "" nil)
            (alltodo ""
                     ((org-agenda-overriding-header "Tasks to Refile")
                      (org-agenda-files '("~/Dropbox/org/inbox.org"))
                      (org-agenda-skip-function
                       '(oh/agenda-skip :headline-if-restricted-and '(todo)))))
            (tags-todo "-CANCELLED/!-HOLD-WAITING"
                       ((org-agenda-overriding-header "Stuck Projects")
                        (org-agenda-skip-function
                         '(oh/agenda-skip :subtree-if '(inactive non-project non-stuck-project habit scheduled deadline)))))
            (tags-todo "-WAITING-CANCELLED/!NEXT"
                       ((org-agenda-overriding-header "Next Tasks")
                        (org-agenda-skip-function
                         '(oh/agenda-skip :subtree-if '(inactive project habit scheduled deadline)))
                        (org-tags-match-list-sublevels t)
                        (org-agenda-sorting-strategy '(todo-state-down effort-up category-keep))))
            (tags-todo "-CANCELLED/!-NEXT-HOLD-WAITING"
                       ((org-agenda-overriding-header "Available Tasks")
                        (org-agenda-skip-function
                         '(oh/agenda-skip :headline-if '(project)
                                          :subtree-if '(inactive habit scheduled deadline)
                                          :subtree-if-unrestricted-and '(subtask)
                                          :subtree-if-restricted-and '(single-task)))
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "-CANCELLED/!"
                       ((org-agenda-overriding-header "Currently Active Projects")
                        (org-agenda-skip-function
                         '(oh/agenda-skip :subtree-if '(non-project stuck-project inactive habit)
                                          :headline-if-unrestricted-and '(subproject)
                                          :headline-if-restricted-and '(top-project)))
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "-CANCELLED/!WAITING|HOLD"
                       ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                        (org-agenda-skip-function
                         '(oh/agenda-skip :subtree-if '(project habit))))))
           nil)
          ("r" "Tasks to Refile" alltodo ""
           ((org-agenda-overriding-header "Tasks to Refile")
            (org-agenda-files '("~/Dropbox/org/inbox.org"))))
          ("#" "Stuck Projects" tags-todo "-CANCELLED/!-HOLD-WAITING"
           ((org-agenda-overriding-header "Stuck Projects")
            (org-agenda-skip-function
             '(oh/agenda-skip :subtree-if '(inactive non-project non-stuck-project
                                                     habit scheduled deadline)))))
          ("n" "Next Tasks" tags-todo "-WAITING-CANCELLED/!NEXT"
           ((org-agenda-overriding-header "Next Tasks")
            (org-agenda-skip-function
             '(oh/agenda-skip :subtree-if '(inactive project habit scheduled deadline)))
            (org-tags-match-list-sublevels t)
            (org-agenda-sorting-strategy '(todo-state-down effort-up category-keep))))
          ("R" "Tasks" tags-todo "-CANCELLED/!-NEXT-HOLD-WAITING"
           ((org-agenda-overriding-header "Available Tasks")
            (org-agenda-skip-function
             '(oh/agenda-skip :headline-if '(project)
                              :subtree-if '(inactive habit scheduled deadline)
                              :subtree-if-unrestricted-and '(subtask)
                              :subtree-if-restricted-and '(single-task)))
            (org-agenda-sorting-strategy '(category-keep))))
          ("p" "Projects" tags-todo "-CANCELLED/!"
           ((org-agenda-overriding-header "Currently Active Projects")
            (org-agenda-skip-function
             '(oh/agenda-skip :subtree-if '(non-project inactive habit)))
            (org-agenda-sorting-strategy '(category-keep))
            (org-tags-match-list-sublevels 'indented)))
          ("w" "Waiting Tasks" tags-todo "-CANCELLED/!WAITING|HOLD"
           ((org-agenda-overriding-header "Waiting and Postponed Tasks")
            (org-agenda-skip-function '(oh/agenda-skip :subtree-if '(project habit)))))))

#+end_src

** TODO org-tags

